rumors_t = {}

local rumors_debug = false

--[[
local rumors_t = {
	["dolg"] = {
		["vasya"] = {
			start_time = time,						-- reset info time
			squad_killer_comm = "monster",			-- squad killer community
			commander_killer_comm = "monster",		-- commander killer community
			npc_killer_comm = "monster",		-- squad member killer community
			squad_level_name = "l01_escape",		-- where squad died
			commander_level_name = "l01_escape",		-- where previous commander died
			npc_level_name = "l01_escape",		-- where last npc died
			squad_died = true,					-- if squad dead
			old_commander = "petya",		-- previous commander name who died
			died = 1,									-- amount of died NPC
			killed_mutant = "encyclopedia_mutants_chimera",		-- last killed rare mutant string link
			killed_mutant_level_name = "l01_escape",				-- last killed rare mutant level name
			killed_stalker_comm = "freedom",				-- last killed stalker community
			killed_stalker_level_name = "l01_escape",	--	 last killed stalker level name
		}
	}
}
--]]

local rare_mutant_names = {
	["chimera"] = "encyclopedia_mutants_chimera",
	["controller"] = "encyclopedia_mutants_controller",
	["gigant"] = "encyclopedia_mutants_pseudogiant",
	["burer"] = "encyclopedia_mutants_burer",
}

local reset_squad_info_cd = 86400 * 7
local ctime_to_t = utils_data.CTime_to_table
local t_to_ctime = utils_data.CTime_from_table

function squad_on_npc_death(squad, se_obj, killer)
	if not squad then return end
	local cur_time = game.get_game_time()

	-- STALKER DIES
	if IsStalker(se_obj) and string.find(squad:section_name(), "sim_squad") then

		-- get commander and community
		local commander_id = squad.commander_id and squad:commander_id()
		local commander = commander_id and alife_object(commander_id)
		local commander_name = commander and commander.character_name and commander:character_name()
		local squad_comm = squad:get_squad_community()

		-- killer info
		local killer_comm = "empty"
		if IsStalker(killer) then
			local killer_squad = get_object_squad(killer)
			local killer_squad_comm = killer_squad and killer_squad:get_squad_community()
			killer_comm = killer_squad_comm or killer_comm
		elseif IsMonster(killer) then
			killer_comm = "mutant"
		end

		-- store this community and squad commander name
		if commander_name and squad_comm and squad_comm ~= "zombied" then
			rumors_t[squad_comm] = rumors_t[squad_comm] or {}
			rumors_t[squad_comm][commander_name] = rumors_t[squad_comm][commander_name] or {}

			if not (rumors_t[squad_comm][commander_name].start_time) then
				rumors_t[squad_comm][commander_name].start_time = ctime_to_t(cur_time)
			end

			-- if squad is wiped out
			if squad:npc_count() <= 1 then
				rumors_t[squad_comm][commander_name].squad_died = true

				-- killer
				rumors_t[squad_comm][commander_name].squad_killer_comm = killer_comm
				-- level
				rumors_t[squad_comm][commander_name].squad_level_name = get_obj_level_name(se_obj)

				pr("RUMORS: squad wiped out: %s - %s || killer: %s - %s", squad_comm, commander_name, killer_comm, rumors_t[squad_comm][commander_name].squad_level_name)

			-- if commander from squad died
			elseif se_obj.id == commander_id then
				rumors_t[squad_comm][commander_name].died = (rumors_t[squad_comm][commander_name].died and rumors_t[squad_comm][commander_name].died + 1) or 1
				rumors_t[squad_comm][commander_name].old_commander = commander_name

				-- killer
				rumors_t[squad_comm][commander_name].commander_killer_comm = killer_comm
				-- level
				rumors_t[squad_comm][commander_name].commander_level_name = get_obj_level_name(se_obj)

				CreateTimeEvent("new_commander_rumors_e", "new_commander_rumors_a", 0.5, store_new_commander, squad.id, commander_name, squad_comm)

				pr("RUMORS: commander died: %s - %s || killer: %s - %s", squad_comm, commander_name, killer_comm, rumors_t[squad_comm][commander_name].commander_level_name)

			-- if npc from squad died
			else
				rumors_t[squad_comm][commander_name].died = (rumors_t[squad_comm][commander_name].died and rumors_t[squad_comm][commander_name].died + 1) or 1

				-- killer
				rumors_t[squad_comm][commander_name].npc_killer_comm = killer_comm
				-- level
				rumors_t[squad_comm][commander_name].npc_level_name = get_obj_level_name(se_obj)

				pr("RUMORS: npc died: %s - %s || killer: %s - %s", squad_comm, commander_name, killer_comm, rumors_t[squad_comm][commander_name].npc_level_name)

			end

		end
	end
	---------------------------------------------------

	-- STALKER KILLS RARE MUTANT
	if IsMonster(se_obj) and IsStalker(killer) then

		-- get killer squad
		local killer_squad = get_object_squad(killer)
		local killer_squad_fits = killer_squad and string.find(killer_squad:section_name(), "sim_squad")
		local killer_commander_id = killer_squad and killer_squad.commander_id and killer_squad:commander_id()
		local killer_commander = killer_commander_id and alife_object(killer_commander_id)
		local killer_commander_name = killer_commander and killer_commander.character_name and killer_commander:character_name()
		local killer_squad_comm = killer_squad and killer_squad:get_squad_community()

		-- killed rare mutant
		local found_mutant_name
		for str, mut_name in pairs(rare_mutant_names) do
			if string.find(se_obj:section_name(), str) then
				found_mutant_name = mut_name
				break
			end
		end

		-- store this community and squad commander name
		if found_mutant_name and killer_squad_fits and killer_commander_name and killer_squad_comm and killer_squad_comm ~= "zombied" then
			rumors_t[killer_squad_comm] = rumors_t[killer_squad_comm] or {}
			rumors_t[killer_squad_comm][killer_commander_name] = rumors_t[killer_squad_comm][killer_commander_name] or {}

			if not (rumors_t[killer_squad_comm][killer_commander_name].start_time) then
				rumors_t[killer_squad_comm][killer_commander_name].start_time = ctime_to_t(cur_time)
			end

			rumors_t[killer_squad_comm][killer_commander_name].killed_mutant = found_mutant_name
			rumors_t[killer_squad_comm][killer_commander_name].killed_mutant_level_name = get_obj_level_name(se_obj)

			pr("RUMORS: kills mutant: %s - %s || mutant: %s - %s", killer_squad_comm, killer_commander_name, rumors_t[killer_squad_comm][killer_commander_name].killed_mutant, rumors_t[killer_squad_comm][killer_commander_name].killed_mutant_level_name)

		end
	end
	---------------------------------------------------

	-- STALKER KILLS STALKER
	if IsStalker(se_obj) and IsStalker(killer) then

		local killer_squad = get_object_squad(killer)
		local killer_squad_fits = killer_squad and string.find(killer_squad:section_name(), "sim_squad")
		local killer_commander_id = killer_squad and killer_squad.commander_id and killer_squad:commander_id()
		local killer_commander = killer_commander_id and alife_object(killer_commander_id)
		local killer_commander_name = killer_commander and killer_commander.character_name and killer_commander:character_name()
		local killer_squad_comm = killer_squad and killer_squad:get_squad_community()

		-- store this community and squad commander name
		if killer_squad_fits and killer_commander_name and killer_squad_comm and killer_squad_comm ~= "zombied" then
			rumors_t[killer_squad_comm] = rumors_t[killer_squad_comm] or {}
			rumors_t[killer_squad_comm][killer_commander_name] = rumors_t[killer_squad_comm][killer_commander_name] or {}

			if not (rumors_t[killer_squad_comm][killer_commander_name].start_time) then
				rumors_t[killer_squad_comm][killer_commander_name].start_time = ctime_to_t(cur_time)
			end

			-- killed stalker
			local squad_comm = squad:get_squad_community()
			if squad_comm then
				rumors_t[killer_squad_comm][killer_commander_name].killed_stalker_comm = squad_comm
				rumors_t[killer_squad_comm][killer_commander_name].killed_stalker_level_name = get_obj_level_name(se_obj)
			end

			pr("RUMORS: kills stalker: %s - %s || stalker: %s - %s", killer_squad_comm, killer_commander_name, rumors_t[killer_squad_comm][killer_commander_name].killed_stalker_comm, rumors_t[killer_squad_comm][killer_commander_name].killed_stalker_level_name)

		end
	end

end

function store_new_commander(squad_id, commander_name, squad_comm)
	local squad = alife_object(squad_id)
	if squad and rumors_t[squad_comm] and rumors_t[squad_comm][commander_name] then
		local new_commander_id = squad.commander_id and squad:commander_id()
		local new_commander = new_commander_id and alife_object(new_commander_id)
		local new_commander_name = new_commander and new_commander.character_name and new_commander:character_name()
		if new_commander_name and squad_comm then
			rumors_t[squad_comm][new_commander_name] = rumors_t[squad_comm][commander_name]
			rumors_t[squad_comm][commander_name] = nil
			pr("RUMORS: new commander: %s", new_commander_name)
		end
	end

	return true
end

function get_obj_level_name(se_obj)
	local target_level_id = se_obj and game_graph():vertex(se_obj.m_game_vertex_id):level_id()
	local target_level_name = target_level_id and alife():level_name(target_level_id)
	return target_level_name
end

local tmr = 0
function actor_on_update()
	local tg = time_global()
	if tg < tmr then return end
	tmr = tg + 15000

	-- reset squad info
	local cur_time = game.get_game_time()
	for squad_comm, commander_table in pairs(rumors_t) do
		for commander_name, properties_t in pairs(commander_table) do
			local time_diff = properties_t.start_time and cur_time:diffSec(t_to_ctime(properties_t.start_time))
			if time_diff and time_diff > reset_squad_info_cd then
				rumors_t[squad_comm][commander_name] = nil
			end
		end
	end

end

function save_state(m_data)
	m_data.rumors_t = rumors_t
end

function load_state(m_data)
	rumors_t = m_data.rumors_t or {}
end

function pr(...)
	if not rumors_debug then return end
	printf(...)
end

function on_game_start()
	RegisterScriptCallback("squad_on_npc_death", squad_on_npc_death)
	RegisterScriptCallback("actor_on_update", actor_on_update)
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
end